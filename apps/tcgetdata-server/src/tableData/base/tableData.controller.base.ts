/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TableDataService } from "../tableData.service";
import { TableDataCreateInput } from "./TableDataCreateInput";
import { TableData } from "./TableData";
import { TableDataFindManyArgs } from "./TableDataFindManyArgs";
import { TableDataWhereUniqueInput } from "./TableDataWhereUniqueInput";
import { TableDataUpdateInput } from "./TableDataUpdateInput";

export class TableDataControllerBase {
  constructor(protected readonly service: TableDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TableData })
  async createTableData(
    @common.Body() data: TableDataCreateInput
  ): Promise<TableData> {
    return await this.service.createTableData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TableData] })
  @ApiNestedQuery(TableDataFindManyArgs)
  async tableDataItems(@common.Req() request: Request): Promise<TableData[]> {
    const args = plainToClass(TableDataFindManyArgs, request.query);
    return this.service.tableDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TableData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tableData(
    @common.Param() params: TableDataWhereUniqueInput
  ): Promise<TableData | null> {
    const result = await this.service.tableData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TableData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTableData(
    @common.Param() params: TableDataWhereUniqueInput,
    @common.Body() data: TableDataUpdateInput
  ): Promise<TableData | null> {
    try {
      return await this.service.updateTableData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TableData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTableData(
    @common.Param() params: TableDataWhereUniqueInput
  ): Promise<TableData | null> {
    try {
      return await this.service.deleteTableData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
