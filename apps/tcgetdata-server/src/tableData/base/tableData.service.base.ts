/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TableData as PrismaTableData } from "@prisma/client";

export class TableDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TableDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tableData.count(args);
  }

  async tableDataItems<T extends Prisma.TableDataFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TableDataFindManyArgs>
  ): Promise<PrismaTableData[]> {
    return this.prisma.tableData.findMany<Prisma.TableDataFindManyArgs>(args);
  }
  async tableData<T extends Prisma.TableDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TableDataFindUniqueArgs>
  ): Promise<PrismaTableData | null> {
    return this.prisma.tableData.findUnique(args);
  }
  async createTableData<T extends Prisma.TableDataCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TableDataCreateArgs>
  ): Promise<PrismaTableData> {
    return this.prisma.tableData.create<T>(args);
  }
  async updateTableData<T extends Prisma.TableDataUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TableDataUpdateArgs>
  ): Promise<PrismaTableData> {
    return this.prisma.tableData.update<T>(args);
  }
  async deleteTableData<T extends Prisma.TableDataDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TableDataDeleteArgs>
  ): Promise<PrismaTableData> {
    return this.prisma.tableData.delete(args);
  }
}
